const mongoose = require('mongoose');
const { MONGODB_URI } = require('../keys');

// 1. Configuraci√≥n de eventos de conexi√≥n
mongoose.connection.on('connected', () => {
  console.log('‚úÖ Mongoose conectado a MongoDB en:', mongoose.connection.host);
});

mongoose.connection.on('error', (err) => {
  console.error('‚ùå Error de conexi√≥n en Mongoose:', err);
});

mongoose.connection.on('disconnected', () => {
  console.log('‚ö†Ô∏è  Mongoose desconectado de MongoDB');
});

// 2. Funci√≥n de conexi√≥n mejorada
const connectDB = async () => {
  try {
    // Codificar contrase√±a por si contiene caracteres especiales
    const encodedPassword = encodeURIComponent('0987021692@Rj');
    const connectionURI = MONGODB_URI.replace('<PASSWORD>', encodedPassword);

    await mongoose.connect(connectionURI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      connectTimeoutMS: 10000, // 10 segundos de timeout
      socketTimeoutMS: 45000, // 45 segundos
    });
    
    console.log('üöÄ MongoDB conectado correctamente');
  } catch (err) {
    console.error('üí• FALLA CR√çTICA en conexi√≥n MongoDB:', err.message);
    process.exit(1); // Termina la aplicaci√≥n con error
  }
};

// 3. Manejo de cierre de aplicaci√≥n
process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n a MongoDB cerrada por terminaci√≥n de la app');
    process.exit(0);
  } catch (err) {
    console.error('Error al cerrar conexi√≥n MongoDB:', err);
    process.exit(1);
  }
});

// 4. Iniciar conexi√≥n inmediatamente (como solicitaste)
connectDB();

// 5. Exportar modelos (ajusta las rutas seg√∫n tu estructura)
const pageModel = require('../models/mongo/page');

module.exports = {
  pageModel,
};